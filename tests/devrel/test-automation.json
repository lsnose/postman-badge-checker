{
	"info": {
		"_postman_id": "b184f317-b3f6-43fd-9397-796806fa5ca5",
		"name": "Testing and automation processing",
		"description": "This is a backup, more manual method of validating student submissions if you can't get Google auth working.\n\nThe request in this collection just has a duplicate of the test script in the collection the learner worked through.\n\nCopy the submitted collection urls from the form sheet and save in a csv file like this:\n\n```\ncollection-url\nhttps://www.getpostman.com/collections/b96ac96c2ed9fedc6e04\nhttps://www.getpostman.com/collections/29631fbf3735a7abca83\nhttps://www.getpostman.com/collections/4454f99e0e7a57b09837\n```\n\nRun the collection, choosing the csv file and check for fails / passes.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9215231"
	},
	"item": [
		{
			"name": "Test testing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let myCollection = pm.response.json();",
							"let requests = myCollection.item;",
							"console.log(requests);",
							"let tests_pm = [],",
							"    pre = false,",
							"    fails = [];",
							"for (const apireq of requests) {",
							"    if (apireq.event.length > 1) pre = true;",
							"    if (apireq.name.indexOf(\"Complete training\") < 0)",
							"        for (const ev of apireq.event) {",
							"            tests_pm.push(ev.script.exec.join(\" \"));",
							"            if (ev.listen === \"prerequest\") {",
							"                let hasPre = false;",
							"                for (const ln of ev.script.exec)",
							"                    if (!ln.startsWith(\"//\")) {",
							"                        hasPre = true;",
							"                        break;",
							"                    }",
							"                if (!hasPre) pre = false;",
							"            }",
							"        }",
							"}",
							"let scriptText = tests_pm.join(\" \");",
							"",
							"//TODO accommodate variations so we can accept varied syntax",
							"if (!pre) fails.push(\"No pre-request script included\");",
							"if (tests_pm.length < 4) fails.push(\"Not all tests_pm included\");",
							"let scriptElements = [{",
							"        elem: \"pm.response.json\",",
							"        message: \"No script parsing response body with pm.response.json syntax (each request)\"",
							"    },",
							"    {",
							"        elem: \"pm.globals.set\",",
							"        message: \"No script setting a global variable (requests 1-3)\"",
							"    },",
							"    {",
							"        elem: \"sku\",",
							"        message: \"Assignment 1: Save sku variable - not completed\"",
							"    },",
							"    {",
							"        elem: \"orderId\",",
							"        message: \"Assignment 2: Save orderId - not completed\"",
							"    },",
							"    {",
							"        elem: \"201\",",
							"        message: \"Assignment 3: Check for 201 status - not completed\"",
							"    },",
							"    {",
							"        elem: \"created\",",
							"        message: \"Assignment 4: Check created property - not completed\"",
							"    },",
							"    {",
							"        elem: \"true\",",
							"        message: \"Assignment 4: Check for true value - not completed\"",
							"    },",
							"    {",
							"        elem: \"number\",",
							"        message: \"Assignment 4: Check for number - not completed\"",
							"    },",
							"    {",
							"        elem: \"to.have.status\",",
							"        message: \"No to.have.status test (requests 1, 3)\"",
							"    },",
							"    {",
							"        elem: \"to.have.property\",",
							"        message: \"No to.have.property test (request 1)\"",
							"    },",
							"    {",
							"        elem: \"to.be.a\",",
							"        message: \"No to.be.a type check (requests 1-3)\"",
							"    },",
							"    {",
							"        elem: \"to.eql\",",
							"        message: \"No to.eql property value equality check (request 2)\"",
							"    },",
							"    {",
							"        elem: \"setNextRequest\",",
							"        message: \"No script setting request execution order (request 4)\"",
							"    },",
							"    {",
							"        elem: \"to.have.jsonSchema\",",
							"        message: \"No to.have.jsonSchema validation test (request 4)\"",
							"    }",
							"];",
							"for (const el of scriptElements) {",
							"    if (scriptText.indexOf(el.elem) < 0) fails.push(el.message);",
							"}",
							"let result = {};",
							"if (fails.length > 0) {",
							"    result.completed = false;",
							"    result.message =",
							"        \"Oops! Your collection is still missing some parts. Check out what's missing below and go back through the steps \" +",
							"        \"in the request documentation. 🙂\";",
							"    result.fails = fails;",
							"} else {",
							"    result.completed = true;",
							"    result.message =",
							"        \"Your collection is complete! Fill out the form at bit.ly/submit-api-testing to get your badge and swag! 🏆\";",
							"}",
							"",
							"pm.test(\"Tests completed\", () => {",
							"    pm.expect(result.completed).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{COLLECTION_JSON_URL}}",
					"host": [
						"{{COLLECTION_JSON_URL}}"
					]
				}
			},
			"response": []
		}
	]
}