{
	"info": {
		"_postman_id": "c25175e0-d050-4025-8146-e906e305faa2",
		"name": "Adoption processing",
		"description": "This is a backup, more manual method of validating student submissions if you can't get Google auth working.\n\nThe request in this collection just has a duplicate of the test script in the collection the learner worked through.\n\nCopy the submitted collection urls from the form sheet and save in a csv file like this:\n\n```\ncollection-url\nhttps://www.getpostman.com/collections/b96ac96c2ed9fedc6e04\nhttps://www.getpostman.com/collections/29631fbf3735a7abca83\nhttps://www.getpostman.com/collections/4454f99e0e7a57b09837\n```\n\nRun the collection, choosing the csv file and check for fails / passes.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9215231"
	},
	"item": [
		{
			"name": "Test adoption",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//request array",
							"let requestArr = pm.response.json().item[0].item;",
							"//collection vars",
							"let collVars=pm.response.json().variable;",
							"",
							"//added docs",
							"pm.test(\"Added request description\", () => {",
							"    let descArr = requestArr.filter(value => value.request.description).map(value => value.request.description);",
							"    console.log(descArr);",
							"    pm.expect(descArr).to.have.length.of.above(0);",
							"});",
							"",
							"//added examples",
							"//request response [] not empty for at least one",
							"pm.test(\"Added response examples\", () => {",
							"    let egArr = requestArr.filter(value => value.response.length>0).map(value => value.response);",
							"    console.log(egArr);",
							"    pm.expect(egArr).to.have.length.of.above(0);",
							"});",
							"",
							"//used dynamic vars",
							"//check request body as they were automatically added to response",
							"pm.test(\"Added dynamic variables to request body\", () => {",
							"    let bodyArr = requestArr.filter(value => value.request.body).map(value => value.request.body.raw);",
							"    pm.expect(bodyArr.join(' ').indexOf('{{$')).to.be.greaterThan(-1);",
							"});",
							"",
							"//mocked, collection script sets a var when the send url includes 'mock.pstmn'",
							"pm.test(\"Mocked requests\", () => {",
							"    const mockVar = collVars.filter(m => m.key === \"mocked\"); ",
							"    pm.expect(mockVar).to.have.length.greaterThan(0);",
							"});",
							"",
							"//visualizer - get customer and get list uncommented out and ran at least once",
							"pm.test(\"Ran visualizer\", () => {",
							"    const visVar = collVars.filter(m => m.key === \"visualized\"); ",
							"    pm.expect(visVar).to.have.length.greaterThan(0);",
							"});",
							"",
							"//published workspace",
							"pm.test(\"Published workspace (included in Headers 'workspace' param)\", () => {",
							"    let params=pm.response.json().item[1].item[1].request.header[0];",
							"    pm.expect(params.value).to.have.length.greaterThan(0);",
							"    pm.expect(params.value).to.contain('postman.com');",
							"    pm.expect(params.value).to.contain('/workspace');",
							"});",
							"",
							"//visualizer output",
							"var template = `",
							"<h3>Complete and submit your collection</h3>",
							"<p>",
							"    Check out the Test Results to see if your collection is complete. Make sure you included the up to date collection link as the address for this request, and the URL for your public workspace in the request headers.",
							"</p>",
							"<p>",
							"If you have any fails, look back through the requests or ask for support in the event chat or at community.postman.com/c/training.",
							"</p>",
							"<p>",
							"When all of your tests pass, navigate to this form in your browser and include your collection link to get your badge and swag! bit.ly/submit-api-adoption",
							"</p>",
							"`;",
							"pm.visualizer.set(template, {});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{COLLECTION_JSON_URL}}",
					"host": [
						"{{COLLECTION_JSON_URL}}"
					]
				}
			},
			"response": []
		}
	]
}