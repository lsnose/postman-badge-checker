{
	"info": {
		"_postman_id": "d520c688-b7ad-436e-886b-5dfdd251097d",
		"name": "TEST: API Fundamentals Student Expert",
		"description": "This Collection is used [t](https://github.com/Postman-Student-Program/postman-submission-checker-api)o test API Fundamentals Student Expert submissions before issuing a badge\n\n## Updating tests\n\nIf the tests need to be changed, edit in the Tests tab and Save.\n\n**IMPORTANT** In order for the changes to be applied to the API, the JSON URL data must be updated:\n\n`Collection folder > Share collection > Via JSON link > Update Link`\n\n## Dummy data\n\nfor testing pass/fail cases locally when editing tests, select the `test a claim` environment and use either collection link below for the `COLLECTION_JSON_URL`\n\npass:\n\n[https://www.getpostman.com/collections/379f8c4413acca3956e2](https://www.getpostman.com/collections/379f8c4413acca3956e2)\n\nfail:\n\n[https://www.getpostman.com/collections/ff1b66fa36d26c4510af](https://www.getpostman.com/collections/ff1b66fa36d26c4510af)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15567703"
	},
	"item": [
		{
			"name": "test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"//check collection name is correct",
							"let nameCorrect=false;",
							"pm.test('Collection is named \"Student expert\"', () => {",
							"    let studIndex = pm.response.json().info.name.indexOf(\"Student expert\");",
							"    let classIndex = pm.response.json().info.name.indexOf(\"Classroom\");",
							"    nameCorrect = studIndex>-1 || classIndex>-1;",
							"    pm.expect(nameCorrect).to.eql(true);",
							"});",
							"",
							"//if collecton link returns error or isn't the correct collection",
							"if(pm.response.code===200 && nameCorrect){",
							"",
							"    //auth details at collection level",
							"    let authObj = pm.response.json().auth;",
							"    //request array",
							"    let requestArr = pm.response.json().item[0].item;",
							"    //mock array ",
							"    let mockArr = pm.response.json().item[1].item;",
							"    //checks array",
							"    let checksArr = pm.response.json().item[2].item;",
							"",
							"    //info",
							"    pm.test(\"Once all of your tests are passing, save your collection, update the link via the Share flow, and submit it: bit.ly/student-expert-submission\", () =>{",
							"        pm.expect(true).to.eql(true);",
							"    })",
							"",
							"    //used auth",
							"    pm.test(\"Authorized requests\", () => {",
							"        pm.expect(authObj).to.be.an(\"object\");",
							"        pm.expect(authObj).to.have.property(\"apikey\"); ",
							"        console.log(authObj);",
							"    });",
							"",
							"    //used all required methods",
							"    pm.test(\"Used GET, POST, PUT, DELETE methods\", () => {",
							"        //first folder should have all methods in requests",
							"        let methArr = requestArr.map(value => value.request.method); ",
							"        console.log(methArr);",
							"        pm.expect(methArr).to.include.members([\"GET\", \"POST\", \"PUT\", \"DELETE\"]);",
							"    });",
							"",
							"    //used params - query and path",
							"    pm.test(\"Used query and path parameters\", () => {",
							"        //first folder should have query",
							"        let queryArr = requestArr.filter(value => value.request.url.query).map(value => value.request.url.query);",
							"        console.log(queryArr);",
							"        pm.expect(queryArr).to.have.length.of.above(0);",
							"        //first folder should also have path",
							"        let pathArr = requestArr.filter(value => value.request.url.path).map(value => value.request.url.path);",
							"        var pathParams = pathArr.flat().filter(p => p.startsWith(':')); ",
							"        console.log(pathParams);",
							"        pm.expect(pathParams).to.have.length.of.above(0);",
							"    });",
							"",
							"    //sent body",
							"    pm.test(\"Sent body data\", () => {",
							"        //first folder should have a body",
							"        let bodyArr = requestArr.filter(value => value.request.body).map(value => value.request.body); ",
							"        console.log(bodyArr);",
							"        pm.expect(bodyArr).to.have.length.of.above(0);",
							"    });",
							"",
							"    //used vars (can currently only check env with run output - future enhancement - atm check set env var from script)",
							"    pm.test(\"Used variables\", () => {",
							"        //should be a var reference in query param for mock folder",
							"        let varsArr = mockArr.filter(value => value.request.url.query).map(value => value.request.url.query);",
							"        let queries = varsArr.flat().filter(value => value.value).map(value => value.value);",
							"        var queryVars = queries.filter(p => encodeURI(p).indexOf('%7B%7B')>-1); ",
							"        console.log(queryVars);",
							"        pm.expect(queryVars).to.have.length.of.above(0);",
							"        //base path for main folder should also use var",
							"        //url is object when path or query param, string otherwise",
							"        let addresses = requestArr.filter(value => value.request.url.raw ? value.request.url.raw : value.request.url).map(value => value.request.url.raw ? value.request.url.raw : value.request.url);",
							"        var addressVars = addresses.filter(p => encodeURI(p).indexOf('%7B%7B')>-1); ",
							"        console.log(addressVars);",
							"        pm.expect(addressVars).to.have.length.of.above(0);",
							"        //auth should also use var",
							"        pm.expect(encodeURI(authObj.apikey.value).indexOf('%7B%7B')).to.be.above(-1);",
							"    });",
							"",
							"    //assed description",
							"    pm.test(\"Added request description\", () => {",
							"        //second folder should have a description",
							"        let descArr = mockArr.filter(value => value.request.description).map(value => value.request.description);",
							"        console.log(descArr);",
							"        pm.expect(descArr).to.have.length.of.above(0);",
							"    });",
							"",
							"    //set var from script and next request - make it env var so we check that too",
							"    pm.test(\"Set env variable from script and set next request\", () => {",
							"        //second folder should have set var and next req",
							"        let testsArr = mockArr.filter(value => value.event).map(value => value.event); ",
							"        console.log(testsArr);",
							"        let execArr = testsArr.flat().filter(value => value.script.exec).map(value => value.script.exec); ",
							"        var setsVars = execArr.flat().filter(p => p.indexOf('environment.set(')>-1); ",
							"        console.log(setsVars);",
							"        pm.expect(setsVars).to.have.length.of.above(0);",
							"        var setsReqs = execArr.flat().filter(p => p.indexOf('.setNextRequest')>-1); ",
							"        console.log(setsReqs);",
							"        pm.expect(setsReqs).to.have.length.of.above(0);",
							"    });",
							"    //add skill check test",
							"    pm.test('Skills checked', () =>{",
							"        var vars = pm.response.json().variable.map(value => value.key);",
							"        pm.expect(vars).to.include('skilled');",
							"    });",
							"    //check pulled response property",
							"    pm.test('Skill check code retrieving set var value from response property', () => {",
							"        //need to make sure set var from response json in skill check request - third folder",
							"            //need to make sure set var from response json in skill check request - third folder",
							"        let scr = JSON.stringify(checksArr[0].event[0].script);",
							"        let resParse = scr.indexOf('pm.response.json')>-1 || scr.indexOf('.rand')>-1;",
							"        pm.expect(resParse).to.be.true;",
							"    });",
							"}",
							"else {",
							"    pm.test(\"Collection link issue - import and check\", () => {",
							"        pm.expect(true).to.be.true;",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{COLLECTION_JSON_URL}}",
					"host": [
						"{{COLLECTION_JSON_URL}}"
					]
				},
				"description": "`submissionLink` value is provided by `newman` as an `envVar` when this collection is run"
			},
			"response": []
		}
	]
}